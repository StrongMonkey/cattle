/*
 * This file is generated by jOOQ.
*/
package io.cattle.platform.core.model.tables;


import io.cattle.platform.core.model.CattleTable;
import io.cattle.platform.core.model.Keys;
import io.cattle.platform.core.model.tables.records.ContainerEventRecord;
import io.cattle.platform.db.jooq.converter.DataConverter;
import io.cattle.platform.db.jooq.converter.DateConverter;

import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ContainerEventTable extends TableImpl<ContainerEventRecord> {

    private static final long serialVersionUID = -1544476946;

    /**
     * The reference instance of <code>cattle.container_event</code>
     */
    public static final ContainerEventTable CONTAINER_EVENT = new ContainerEventTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContainerEventRecord> getRecordType() {
        return ContainerEventRecord.class;
    }

    /**
     * The column <code>cattle.container_event.id</code>.
     */
    public final TableField<ContainerEventRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cattle.container_event.account_id</code>.
     */
    public final TableField<ContainerEventRecord, Long> ACCOUNT_ID = createField("account_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.container_event.kind</code>.
     */
    public final TableField<ContainerEventRecord, String> KIND = createField("kind", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>cattle.container_event.state</code>.
     */
    public final TableField<ContainerEventRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(128).nullable(false), this, "");

    /**
     * The column <code>cattle.container_event.created</code>.
     */
    public final TableField<ContainerEventRecord, Date> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP, this, "", new DateConverter());

    /**
     * The column <code>cattle.container_event.data</code>.
     */
    public final TableField<ContainerEventRecord, Map<String,Object>> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "", new DataConverter());

    /**
     * The column <code>cattle.container_event.external_id</code>.
     */
    public final TableField<ContainerEventRecord, String> EXTERNAL_ID = createField("external_id", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.container_event.external_status</code>.
     */
    public final TableField<ContainerEventRecord, String> EXTERNAL_STATUS = createField("external_status", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.container_event.external_from</code>.
     */
    public final TableField<ContainerEventRecord, String> EXTERNAL_FROM = createField("external_from", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.container_event.external_timestamp</code>.
     */
    public final TableField<ContainerEventRecord, Long> EXTERNAL_TIMESTAMP = createField("external_timestamp", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cattle.container_event.reported_host_uuid</code>.
     */
    public final TableField<ContainerEventRecord, String> REPORTED_HOST_UUID = createField("reported_host_uuid", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>cattle.container_event.host_id</code>.
     */
    public final TableField<ContainerEventRecord, Long> HOST_ID = createField("host_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>cattle.container_event</code> table reference
     */
    public ContainerEventTable() {
        this("container_event", null);
    }

    /**
     * Create an aliased <code>cattle.container_event</code> table reference
     */
    public ContainerEventTable(String alias) {
        this(alias, CONTAINER_EVENT);
    }

    private ContainerEventTable(String alias, Table<ContainerEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private ContainerEventTable(String alias, Table<ContainerEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return CattleTable.CATTLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ContainerEventRecord, Long> getIdentity() {
        return Keys.IDENTITY_CONTAINER_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ContainerEventRecord> getPrimaryKey() {
        return Keys.KEY_CONTAINER_EVENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ContainerEventRecord>> getKeys() {
        return Arrays.<UniqueKey<ContainerEventRecord>>asList(Keys.KEY_CONTAINER_EVENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ContainerEventRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ContainerEventRecord, ?>>asList(Keys.FK_CONTAINER_EVENT__ACCOUNT_ID, Keys.FK_CONTAINER_EVENT__HOST_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContainerEventTable as(String alias) {
        return new ContainerEventTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ContainerEventTable rename(String name) {
        return new ContainerEventTable(name, null);
    }
}
